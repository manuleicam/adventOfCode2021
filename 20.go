package main

import (
	"fmt"
	"strconv"
)

func main() {

	matrixImg := make([][]string, 0)
	matrixImg = append(matrixImg, []string{"."})

	//matrixOut := make([][]string, 0)

	for _, line := range Input_img {
		inputLine := make([]string, 0)
		inputLine = append(inputLine, ".")
		for _, char := range line {
			inputLine = append(inputLine, string(char))
		}
		inputLine = append(inputLine, ".")
		matrixImg = append(matrixImg, inputLine)
	}

	topBot := make([]string, 0)

	for range matrixImg[1] {

		topBot = append(topBot, ".")

	}

	matrixImg[0] = topBot

	matrixImg = append(matrixImg, topBot)
	printMatrix(matrixImg)
	matrixOut := matrixImg

	totON := 0
	univChar := "."

	for i := 0; i < 50; i++ {
		fmt.Println()
		totON = 0

		if univChar == "." {
			univChar = string(Input_alg[calcBinario("000000000")])
		} else {
			univChar = string(Input_alg[calcBinario("111111111")])
		}

		matrixOut = buildOutPutMatrix(matrixOut, univChar)

		for _, line := range matrixOut {
			for _, col := range line {
				if col == "#" {
					totON++
				}
			}

		}

		//printMatrix(matrixOut)
		fmt.Println(totON)
	}

}

func buildOutPutMatrix(matrixImg [][]string, univChar string) [][]string {

	matrixOut := make([][]string, 0)
	topBot := make([]string, 0)
	topBot = append(topBot, univChar)

	matrixOut = append(matrixOut, topBot)

	for row, line := range matrixImg {
		outPutLine := make([]string, 0)
		outPutLine = append(outPutLine, univChar)

		for col, _ := range line {

			if col == 0 {
				topBot = append(topBot, univChar)
			}

			newPixelString := getOutPutPixel(row, col, matrixImg, univChar)
			newPixelBits := pixelStringToBit(newPixelString)
			newPixelNumber := calcBinario(newPixelBits)
			newPixel := string(Input_alg[newPixelNumber])
			outPutLine = append(outPutLine, newPixel)

		}

		outPutLine = append(outPutLine, univChar)

		matrixOut = append(matrixOut, outPutLine)

	}
	topBot = append(topBot, univChar)
	matrixOut = append(matrixOut, topBot)
	matrixOut[0] = topBot

	return matrixOut

}

func pixelStringToBit(pixelString string) string {
	pixelBin := ""
	pixelMaps := make(map[string]string)
	pixelMaps["#"] = "1"
	pixelMaps["."] = "0"

	for _, char := range pixelString {

		pixelBin = pixelBin + pixelMaps[string(char)]

	}

	return pixelBin

}

func getOutPutPixel(row, col int, matrixImg [][]string, univChar string) string {
	nCols := len(matrixImg[0]) - 1
	nRows := len(matrixImg) - 1
	newPixelString := ""

	if row != 0 {
		if col != 0 {
			newPixelString = newPixelString + matrixImg[row-1][col-1]
		} else {
			newPixelString = newPixelString + matrixImg[row][col]
		}
		newPixelString = newPixelString + matrixImg[row-1][col]
		if col != nCols {
			newPixelString = newPixelString + matrixImg[row-1][col+1]
		} else {
			newPixelString = newPixelString + matrixImg[row][col]
		}
	} else {
		newPixelString = newPixelString + matrixImg[row][col] + matrixImg[row][col] + matrixImg[row][col]
	}

	if col != 0 {
		newPixelString = newPixelString + matrixImg[row][col-1]
	} else {
		newPixelString = newPixelString + matrixImg[row][col]
	}

	newPixelString = newPixelString + matrixImg[row][col]

	if col != nCols {
		newPixelString = newPixelString + matrixImg[row][col+1]
	} else {
		newPixelString = newPixelString + matrixImg[row][col]
	}

	if row != nRows {
		if col != 0 {
			newPixelString = newPixelString + matrixImg[row+1][col-1]
		} else {
			newPixelString = newPixelString + matrixImg[row][col]
		}
		newPixelString = newPixelString + matrixImg[row+1][col]
		if col != nCols {
			newPixelString = newPixelString + matrixImg[row+1][col+1]
		} else {
			newPixelString = newPixelString + matrixImg[row][col]
		}

	} else {
		newPixelString = newPixelString + matrixImg[row][col] + matrixImg[row][col] + matrixImg[row][col]
	}

	return newPixelString

}

func calcBinario(bits string) int {

	finalVal := 0

	bitsSize := len(bits)
	j := 0
	for i := bitsSize - 1; i >= 0; i-- {

		bit, _ := strconv.Atoi(string(bits[j]))

		finalVal += (expNumber(2, i) * bit)

		j++
	}

	return finalVal

}

func expNumber(base int, exp int) int {

	if exp == 0 {
		return 1
	}

	var res int = 1
	for i := 0; i < exp; i++ {
		res *= base
	}

	return res
}

func printMatrix(matrix [][]string) {

	for _, line := range matrix {
		fmt.Println(line)
	}

}

var Input_alg_T string

var Input_img_t = []string{
	"#..#.",
	"#....",
	"##..#",
	"..#..",
	"..###"}

var Input_alg string

var Input_img = []string{
	"##..#.#...#...#.#..#..##.#.#.##.##.####.##.#.#.##..##..##..#...##..##.#....##.#.####.##...#..#....##",
	"###..#..#..##..#####..##.#.##.##.##.#...##......#...#..#.#..#.....#####...#.######...#.....#...##.##",
	"..##.#..#......#.....##......##.###.###..#####..###.####.#.#....#.#.##..##....####..#.....###..#.##.",
	"#.##....#.....#.....#..####..##.####...#..#####.#.#.##.##.##.#..###...####..###.#...#.###..#..#..###",
	"#.##..#....#.#..#.##....#..#...##.#..#..##.#.#####...#..###...##.#.#....#..#..#....##.#..##..##..#.#",
	"...####.#.####..#.###.....##..#...##...#.######....####...#.#....##.#......#.#.##.##.###...#...#...#",
	"##..##.#....#.....#.#.#####.#.####.#.#.#.#####.###..#.......###.#.###......###.##..##.#####.#.##.###",
	"####.#..#####.##....###...##..###..#...###..###.####..#.##..##.#...####.....#..#.#..##...##.#.###...",
	".#..#...##...####.#.###......#..##...#.##.##.#.#.##.#..##.#.#.#.#..###...###..###..###...###....#...",
	"#.#####..###....###..##....######.#.#..#...#.####.###.####..#.##..##..#.#.#.#..#####....##.##...##..",
	"....#.#.......#.#...#.##...#.#.##.#.###.#.####..#.####...########...#.###.#.#.....#.####.#..#..#.###",
	".##.###.##..#....##..#.##..###......#.##.##.##...#.#...##.#######.#.#.#..###..##..####....##...#..##",
	"#....#..##..#.######....##.#.#........#..#.#..#.....#.#..##.#.#.##.##.#####..##...#.##..#..#....####",
	"#..##..#.#.....###.#.###.##.#.#.###...###...###..##..##.##.......##......##.#.##.#...#.##..#....#..#",
	"#.#.#.#.#.###..###.##..#..#........###..###.##..##.####.##....#..#.......#...###..#..#..#...#.....#.",
	"##...##.####..#####...#.#.##...##...####...##.##.##.#.#####..#..###.#.###.###.#.#.#..#...#.#.####..#",
	"..#..##..#####.##..##...#....###..#.#.....##...######.#..##.#..#####..#.##.#.#.#..#..#.#######..###.",
	".....#.#..####..##.###..###.....#.##...#.#.#...#..#...####.#....#..#...#.##...#..##..#.##....##.###.",
	"......#.#...####....##.#....##..####.#...##...##..#.#.#.###..#.#..##....##...##.#.#..##.##.....###.#",
	"#.####..###..###.#...##..#.#.####..#...#.....###.##..###...#....#######.####.#...#.#.###..####...#.#",
	"###...#.#...#..####.##..###...........#..#....#..#.####.#.......##.##.###.#.#....#.#.#.#...#.#..#...",
	".##.#.#.#.#...###...#...#..#.#.#...##..#..##....#...##..#.#..###.#....##.###....###...######.##.####",
	".....##....#....#.#######.#..##..#..#.....###..#....#.####.##.#..##.#...##..##.#.#.###....#..#...###",
	"..##.#.###.#.####.#.#######.#...#.##.#..##.#####...#.###...###.##.#.###...#..#......########..##..#.",
	"####...#..##......#.#.###.#####.#....#..#..##.....#....##.#.#...###......###.#...#.##.#.......#.....",
	"#.##...#.##..###.#####..###..##.#..##..#..##.##..###...#.##.#..######.##.#...#.#.##....###.#..#.##.#",
	"##.#...##.#.####.#.#.#...#..#.####.##.#..#.#.##...##.###..#..###..#.###....#.###.#.#.###.#...####.##",
	".##...#..#..##..#######...#..####...###..#..#.#..##.#.##.#..#..###.#.##..#.#...###...#######.####.##",
	"##..#.##.#...###.........#.#..#..#.#..#.#..#...##.#.##......#.####.##..###..#.###.#.#####.###...#.#.",
	"...#.###.#..#....####.###.##..####.#.###..##.#.####.##...#.##..#.##.###....#.#.#.##......#.####.....",
	".###.#######..#....####.#..#.#...####.#.....#.#.#.###.###.#.##.###.####..#####...#.....##...###....#",
	"#..#..#.######.##.###.....###..##.#...###.#.#####...####..###..##.###...#..##....##...##.#.##.##..#.",
	"..##...#...#.####..##...#....#..#.##..###.####.##..###.#..####..##.#.####..####..##.#####..###.###..",
	".#..#..#..#....##.#.#####.#.#......#.###.....#.####..#.#.#......#..#.#....#....####..###.#.....#..#.",
	"##.#.##....#...#...#.##.#..........####.##...#..#..##.###...#.#..##########..###.##.#.###.#.#.#.##.#",
	"..#.##.####....##.#..#.##...##.##..##.###.##.....##..##..#.#.#.#.....#...#...##.#..#.....#####.####.",
	"#.#.#..####.####....###.##.##.....###..#####.#......#.#...#..###..##.###.#....#.#.#####.#..#.#######",
	"##..###.#.##..####..#..#.#..##..#...###....#..##.####..##..##.##..###.###.####.#.##.###..##.####.#..",
	"..#.##.#.#####.#....###.#.#..#.###.#.#...##.#.#....#.##...#..#####..###..#.#.####.#...#.####...##...",
	"...###.#..##.#.#...#..#.#.##.#.##.##.#.#.#####..###...#...#...#.#.###......#.##.#.#..#.###.##.####.#",
	"#....#.##......##...##.....####.#.##..##.#..##.###########..#..##.#...##.##......##....#......##.#..",
	"##...#####.###.###..#.###....#.#.#..#..#.#####...###....#.##.#.####....#.#....######....#.#.##.####.",
	"....##....#..##......##.....#.##..####.##.##.#.#.#....#...#...##.##..#....#..##...#.#....#.#..#.###.",
	"...#.......#.#...#....#.#.#....#...#...##.##...###.####......#..###.##....######.##.####.##.....#...",
	"####..###..##...#......##...##..#.#...###..####.###.#....##.###.#..##.#...##.##........####.#...###.",
	"..##.##.#..####..###.#..####...#..#.#..#...#.##..#..##.#######....#...##..#..#.#......#.#.####.#.#..",
	"####.#.#...##....###..#.#..#..#.#...####.###...#####..######.#.....#..###.##.##........###.##.##.###",
	".#.#..#....##.###..##.......###.#...#.######...#####.#..#######...##.##.#..#...#.....#...####.###..#",
	"..#....##.....#....###..##.##..####.....###...#.#...####..###..##....#...###...####.##..########....",
	"..........###...#.......##...####...#######....##..#.##.##.###..###...#######..#..####.##..#.##..##.",
	"#######...###...##.##..#.#....#..#..#...###..#..#.#.#..#..###..#....#...##....#..#.#.......#########",
	".#..##........##.......#.###..#.#.#####.##.#.####..#.#.##...#..#...#.#.##..##.#..##.#####.##....##.#",
	"....##....##.#..#.#...#.....###....##...#.#.#...#.###.....#.#.....#..#####.#..##..#.#####........#..",
	"##.##.#....#..##..##.##.###..#.#.##..###.#..##...####.######.#.#.#...#..#.#.#...#.#..######.#....#..",
	"##.###.#......###..#.#..#.#..#...######.##.##.#####.####......######...####.##.#####...#..#...#.###.",
	".#########....##..###..#.#....####.###.....#..#...##.###.##..####.#.##..#..#....##..###.##..##.#.##.",
	"#.#.#.###...#####..###.####.#####.##.#.#...##..##.#.#...###..##....###.#...##.###.....###...########",
	"###.#.###.....#.#.#..#.#...###.##........#.####..#...###.#.##.####..###.#..#...##.#..##.#.#...#.##.#",
	"..##.#..#.#..##.##.##...####..####.#####.##..#...####...##...###...#####.#####.##...###..#...#.#.##.",
	"##.#.#.#.####..#.##.#...#........##..#.###.###.#.....#..#..##.#####..##.#.####.#......###.#####..#.#",
	"#.######.###...#.###..#..#.#.#.#.###.##..###.###..#.###..#####...##..####..##.######.#.##..#.#.##...",
	".##.#.#.####...###.......#.####...#..###.#.....#.#......##.#.##.###.#####....##.#.#.###......###.#..",
	"###..#.##.####....##.##.#..#.###........###.####....#...#...##...#..###.##.###..####.#.#.#.##.#.....",
	"###...#.###.....#...#.#.#..#.#....##.#.#.#.#.#..#..##.###.###...#....#####..####.##...##.#.###.#..##",
	"..##......#..####...##.#..##.##.......##.####.#.#.###.###...##.#.###..###...########.##...#.##....##",
	".#...#.##..#..###.####.##.#.#.#..#..#.#....#..#..........#####.##.#.#.###.#.##....#...##.#.#.#..#...",
	"..#...##..#.#.###.##..##..####.####..#.....####.##..#.#.#....#..##.##.#####...####.#..#.#...#....#.#",
	"..##..#..#.#..........###.##..###..#...###.###...###..#.##.#####...####.##...####.##...#####.#.#....",
	"..#..####.....###..#..##..##.#..#.####.##..##..#.#.##.##.##..#....#.####.#.#..##.#.####.#..#.##.#..#",
	".#.#.#############..###..##..######........##..###.#..###..##.....###.#.###.#.##.#.#.#.##.#..####..#",
	"...#.###...#.#..#########.###.#..##..###.#.##......########.#....#######....#...#...###..#.#####..#.",
	"..########.####..#..#.#..#..##.#.##...###.#..####..#.#####...##.###.###.##..##.#.#..##...##.##.#.#..",
	"..##.##.#.......#.##..#.#.#####...#.#..#.#####...###.##....#....#..#..####...##....#......#....###..",
	"...#...#..#.###..##...##.##..##.#.###...#...###..###.#..#######..#..##..####..##.#.#.#.#..#.##..#...",
	".#####...##.##.#.#.#.###.#.#..##.....#..###...#..#.##.#...#.....#.#...#..#.#...#..#######.#.#######.",
	"#.##.#...###.#.##.#..#....##.##..#.##.##.#.##.##..#.#..##..#.#..#..#...##..####....#.##.#####....##.",
	"#..#..###.###.##...#########.##.#.###....##.###.###.#.##.#.###....#.#..#.....######...#.#.#....#.#..",
	".....#.######.###.##.........##...#..#..#..##.##..#..###..##..#.#.##.#.#.###.......#.##.....####...#",
	".######.#.####...#.###......#..#.###.##.###.....##.#####..###...##.##.#...#.....#..#...##.#.#.#.####",
	".##..##.#.#..#..##..##.####.#...####......##...##.#####.###..#...#.##..#.#...#.#..#..#..#...#....###",
	"...##.#..#.#..#.###.####.#.#.....#.#.#..##.##.#..#.###.#...##.####.#...#.##..#..####.#####..#.#.#..#",
	"#.##.#..#..##.#..##...#.##.#.###...##.##..#.##.#.#..#..#..##..##.##.#.....#..##...#.#..#....#..####.",
	"#.##..###...##..####.##.#.##..##........###.#..###.#.####..####.#.##.#....#######.#####..##.#..#####",
	"..###.#.#...##....##...##..#..#.#.#.....#..#.#.#.####...#..#...#..#......###.##..#####.####..####..#",
	"..#...#.##..###.#.##..#...###..##.#####.###.#.#.......#.#....###.####..#..#.#..#...###.#.#..###..##.",
	"##.#.#.##.#..###.###......###..##..#..##.#..#.##.#..###..#.####...#..#####..#.####.##.#...#..#.##.#.",
	"..#.##.#......#..............##.###..##.###.#.#.##...##.#.......#######.#...#..##.#..####..#.##.#.##",
	".##..........##...###......#.#.....#.##.##.##..####..##.#.##.#..###.#..####..##.#..#..#.###.##..#..#",
	"##...##...###...#.##..##.####.....#.#.####.##..##.##.##........#.##...##...###########...#..#..#...#",
	".##.##.#..##.#.########...###...###.#...#.####...#.###.##.###...#...###...##...#........##.##.###.#.",
	"##.#..###...######.#.#.#.#.#.#..........#..##...##..#....#..###..######.....#.#..##.#.#..##.##.##.#.",
	"###.##..#.##..#...#.#...#.##...#.###.#..#..#..##.##.##..#..#..###.#.##...##...#.#.##.###.....#.###.#",
	".##..#.##....#.#......###.##.#.##......##..#.##..##..#..##..########..##.#..##...#..#...###.#...#.##",
	".###..#.#.......#....#...#.#....###.#.###.##.##..#.#.....#...#####.#..####.##.##.#.#.#.....#####.#..",
	"##...##.#####.#....###.#.##.###.#.#.#..#..###..##..####..##..###.....##.#.########..#..##..#.#.#.###",
	"..#.##.#.##..###..####.##..#..###....#..#....#.##..#.####.##.#...#.##.##..########.##.##.#.#.#...##.",
	".#..###.######.#.###.##.#.##......##.###.##.#....#......###....####.##.###.#..##.####.#..###.#......",
	"#.....###....##.....###.#..#....#.#...#.#....#.##.######.####.###########...#..#..#..##.#.##.##....#",
	".##.#.#..#...#.#.##..#...####..#.#.#...##..#..#..##...####.#...######.....##...##.##.#..###.###..#..",
	"..#.#..##....##...####.#...#...###..#......#.##....#.##...##......####.##.#.##.#.#.#..#...#..##..#.."}
