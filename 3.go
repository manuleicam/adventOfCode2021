package main

import (
	"fmt"
	"strconv"
)

type probReport struct {
	gamma_rate   int
	epsilon_rate int
	oxygen_rate  int
	co2_rate     int
}

func main() {

	var subReport probReport = probReport{
		gamma_rate:   0,
		epsilon_rate: 0,
		oxygen_rate:  0,
		co2_rate:     0}

	//testByte2 := b & testByte

	//var input_1 = []int{0b00100, 0b11110, 0b10110, 0b10111, 0b10101, 0b01111, 0b00111, 0b11100, 0b10000, 0b11001, 0b00010, 0b01010}

	fmt.Println(subReport)

	//x, _ := strconv.Atoi(strconv.FormatInt(int64(1000), 2))

	//fmt.Println(x)

	//x = x & 0b10
	//fmt.Println(strconv.ParseInt("0b11110", 2, 64))

	//subReport.checkReport(Input_1)

	//fmt.Println(subReport)

	subReport.check02Report(Input_1)

	fmt.Println(subReport)

	subReport.checkCO2Report(Input_1)

	fmt.Println(subReport)
	//fmt.Println(subReport.epsilon_rate * subReport.gamma_rate)
	fmt.Println(subReport.co2_rate * subReport.oxygen_rate)

}

func (subReport *probReport) checkCO2Report(report []int) {

	for i := 11; i >= 0 && len(report) > 1; i-- {
		//fmt.Println(report)
		report = filterArrayByPop(report, i, false)

	}

	subReport.co2_rate, _ = strconv.Atoi(strconv.Itoa(report[0]))

}

func (subReport *probReport) check02Report(report []int) {

	for i := 11; i >= 0 && len(report) > 1; i-- {
		//fmt.Println(report)

		report = filterArrayByPop(report, i, true)

	}

	subReport.oxygen_rate, _ = strconv.Atoi(strconv.Itoa(report[0]))

}

func powerNumber(base int, exp int) int {

	if exp == 0 {
		return 1
	}
	var res int = 1
	for i := 0; i < exp; i++ {
		res *= base
	}

	return res
}

func filterArrayByPop(probArr []int, indexCheck int, mostPop bool) []int {
	auxVal := 0
	arr1 := make([]int, 0)
	arr0 := make([]int, 0)

	byteCompare := powerNumber(2, indexCheck)

	for _, val := range probArr {

		auxVal, _ = strconv.Atoi(strconv.Itoa(val))
		auxVal = auxVal & byteCompare

		if auxVal == byteCompare {
			arr1 = append(arr1, val)
		} else {
			arr0 = append(arr0, val)
		}

	}

	if mostPop {
		if len(arr1) >= len(arr0) {
			return arr1
		} else {
			return arr0
		}
	} else {
		if len(arr1) >= len(arr0) {
			return arr0
		} else {
			return arr1
		}
	}

}

func (subReport *probReport) checkReport(probArr []int) {

	var byteCompare int
	var i int
	var count1 int = 0

	for i = 0; i < 12; i++ {
		count1 = 0
		//byteCompare, _ = strconv.Atoi(strconv.FormatInt(int64(powerNumber(2, i)), 2))
		byteCompare = powerNumber(2, i)
		//fmt.Println(byteCompare)
		for _, val := range probArr {

			val, _ = strconv.Atoi(strconv.Itoa(val))

			val = val & byteCompare

			if val == byteCompare {
				count1++
			}

		}

		//fmt.Println(count1)
		if count1 > (len(probArr) / 2) {

			subReport.gamma_rate += byteCompare

		} else {

			subReport.epsilon_rate += byteCompare

		}

	}

}

func (subReport *probReport) setGammaRate(gamma_rate int) {

	subReport.gamma_rate = gamma_rate

}

func (subReport *probReport) setepsilon_rate(epsilon_rate int) {

	subReport.epsilon_rate = epsilon_rate

}

var Input_1 = []int{
	0b110110000100,
	0b010110011100,
	0b001001101010,
	0b011011101010,
	0b101100010000,
	0b010100110111,
	0b010110101101,
	0b111010110111,
	0b100111110001,
	0b001010110000,
	0b011011000001,
	0b100010100000,
	0b000100110101,
	0b101010001000,
	0b111110000011,
	0b001001111110,
	0b010010010000,
	0b111110110000,
	0b110101100010,
	0b011010010011,
	0b010101011101,
	0b100101111100,
	0b010111101010,
	0b110000101111,
	0b100011100011,
	0b101101110101,
	0b001010010000,
	0b100011001111,
	0b010001111000,
	0b101110000100,
	0b111010010011,
	0b111101010010,
	0b000001010011,
	0b111111110001,
	0b111111111011,
	0b110000011011,
	0b100100100101,
	0b110011110011,
	0b100101001011,
	0b110110101101,
	0b000101110101,
	0b100001101110,
	0b101001001010,
	0b111111001110,
	0b101111001110,
	0b011100110000,
	0b001011001110,
	0b000000110010,
	0b101100101111,
	0b110100000110,
	0b110001100111,
	0b110100000100,
	0b011010000001,
	0b000000110000,
	0b100101100011,
	0b010100101101,
	0b001101100111,
	0b101011000110,
	0b101111001000,
	0b111110111100,
	0b000111000100,
	0b101111000010,
	0b011100100010,
	0b100010010110,
	0b011100000000,
	0b101110110100,
	0b001010100001,
	0b001100100111,
	0b001110100010,
	0b000110111000,
	0b000110101110,
	0b011101011000,
	0b111000110000,
	0b000110100011,
	0b000111101010,
	0b000110111100,
	0b000011100110,
	0b011010001100,
	0b100111100010,
	0b110110000010,
	0b000010101001,
	0b010111000101,
	0b011001011101,
	0b100000000010,
	0b101110100111,
	0b101111000110,
	0b100000011100,
	0b001000001001,
	0b100110100111,
	0b001010000001,
	0b010111101110,
	0b101100011000,
	0b000010100101,
	0b010001001111,
	0b100000110000,
	0b000001000010,
	0b100111010001,
	0b001001100110,
	0b101111100110,
	0b111101110000,
	0b001011101110,
	0b110111010011,
	0b110010000011,
	0b101001100100,
	0b000000111110,
	0b001110011100,
	0b010001101110,
	0b011011110111,
	0b100111100110,
	0b100110000001,
	0b001000001010,
	0b100110111010,
	0b000101101010,
	0b011110011100,
	0b011111110101,
	0b000000101011,
	0b111100100110,
	0b100000010111,
	0b000010011000,
	0b001010111011,
	0b011011011000,
	0b110011101110,
	0b101001100110,
	0b001100010111,
	0b110011010011,
	0b111000101000,
	0b110001010010,
	0b100010111101,
	0b000110111111,
	0b001001110100,
	0b010010111000,
	0b001111010100,
	0b101001001110,
	0b110011010111,
	0b000110010001,
	0b000100101101,
	0b001110001001,
	0b000000111010,
	0b001000010101,
	0b000000001011,
	0b101001011010,
	0b111000000000,
	0b101000010001,
	0b100101111000,
	0b101100001001,
	0b110011011011,
	0b000100101011,
	0b010100110101,
	0b000000000100,
	0b101000010100,
	0b011001110101,
	0b010000100000,
	0b010010010011,
	0b101101000100,
	0b111111000111,
	0b101001111110,
	0b101001010010,
	0b000000101010,
	0b000000100111,
	0b110110100100,
	0b110100110000,
	0b000111100111,
	0b010100100100,
	0b100110100000,
	0b010111100010,
	0b111111010010,
	0b101010101010,
	0b010000111011,
	0b101010111011,
	0b011100101011,
	0b100110010100,
	0b101101101011,
	0b000001101110,
	0b011011011111,
	0b111110001001,
	0b100110101100,
	0b011001111010,
	0b001100110000,
	0b001111001110,
	0b111111111110,
	0b101000000110,
	0b110000111001,
	0b000110000110,
	0b010001010001,
	0b000100010001,
	0b111010111010,
	0b101011101011,
	0b000111000000,
	0b001010111010,
	0b011101100110,
	0b110001010000,
	0b111101011110,
	0b010101010010,
	0b000101010111,
	0b111011101101,
	0b110111011100,
	0b011110100111,
	0b101100101101,
	0b110111100111,
	0b010110010011,
	0b110001011010,
	0b110110110000,
	0b011000000111,
	0b100001100001,
	0b011100011110,
	0b011100011001,
	0b011001001111,
	0b100011011110,
	0b110010001111,
	0b100101101000,
	0b001110101111,
	0b111011101111,
	0b101001000011,
	0b010000000100,
	0b001001110010,
	0b010101000111,
	0b111010001010,
	0b010000111100,
	0b100011111000,
	0b100110010101,
	0b100000100100,
	0b011110000110,
	0b010111010100,
	0b011000100001,
	0b101101011000,
	0b011100001101,
	0b000010001001,
	0b000010101011,
	0b100010101000,
	0b101001011001,
	0b111101100001,
	0b000101111110,
	0b000111011111,
	0b011011011010,
	0b001011111101,
	0b100101010110,
	0b001101110011,
	0b010010110101,
	0b100010010111,
	0b101000011010,
	0b001011010011,
	0b001010111101,
	0b110001001101,
	0b110011001100,
	0b001001011000,
	0b001110111000,
	0b110111011001,
	0b111010110000,
	0b101100110101,
	0b000100100101,
	0b101101011110,
	0b101001110111,
	0b000101000110,
	0b010000010100,
	0b011011010111,
	0b000111111001,
	0b110101001000,
	0b010011101001,
	0b111010011100,
	0b011110010000,
	0b110001010001,
	0b100110110111,
	0b001101010011,
	0b001010001110,
	0b111001101000,
	0b111101000010,
	0b101110100010,
	0b100101111111,
	0b100010001010,
	0b110010000101,
	0b011110011000,
	0b000010111001,
	0b111101011010,
	0b100111000011,
	0b001110101001,
	0b100100110100,
	0b011100001110,
	0b101101100110,
	0b001101110001,
	0b101000100000,
	0b110000101010,
	0b011001110000,
	0b101101110110,
	0b010011000100,
	0b010100001110,
	0b101111101101,
	0b100001100000,
	0b111001111101,
	0b111001100010,
	0b001101001001,
	0b001101110100,
	0b100110101111,
	0b000000101000,
	0b001000111011,
	0b110011010010,
	0b111000001000,
	0b000101010000,
	0b001001011001,
	0b101001110110,
	0b111000000101,
	0b010011010001,
	0b111011001000,
	0b100100111110,
	0b111110001000,
	0b001101000011,
	0b111110011111,
	0b111111101111,
	0b101001011011,
	0b110010100100,
	0b000011100000,
	0b001101000010,
	0b111100001100,
	0b001101000000,
	0b011000100111,
	0b000100100100,
	0b111100011100,
	0b011110000011,
	0b110111001101,
	0b110001000001,
	0b011111110100,
	0b101010011111,
	0b011010110110,
	0b001010100010,
	0b010011100110,
	0b010111010110,
	0b111111110010,
	0b011001001010,
	0b001110100101,
	0b010110010000,
	0b111000110100,
	0b000010101110,
	0b100110000101,
	0b110001110111,
	0b001100001100,
	0b010110111111,
	0b100010010011,
	0b111100110111,
	0b111011101001,
	0b011000001000,
	0b100111001100,
	0b100100100010,
	0b010001111100,
	0b100101001101,
	0b001101111011,
	0b000101010100,
	0b010101101010,
	0b000100010000,
	0b110101110101,
	0b001111011111,
	0b010011111101,
	0b111010110110,
	0b111000000111,
	0b001001111010,
	0b100101110110,
	0b110100010011,
	0b001000001110,
	0b110001100011,
	0b000101010001,
	0b101100110000,
	0b101010011010,
	0b011000110101,
	0b000000010110,
	0b011001010000,
	0b010110100101,
	0b010000101001,
	0b000000111100,
	0b010101100011,
	0b010110001001,
	0b101010101100,
	0b110100001101,
	0b010111111000,
	0b000011100001,
	0b100000001100,
	0b111001100111,
	0b001111111100,
	0b110010101000,
	0b100111000101,
	0b110001101000,
	0b010111001100,
	0b001110110111,
	0b001000110101,
	0b000110001011,
	0b011001000100,
	0b000101000001,
	0b101001000110,
	0b000011101011,
	0b110111111110,
	0b101100000101,
	0b000010011101,
	0b011111010101,
	0b000100110111,
	0b010111011000,
	0b001000010110,
	0b101010111101,
	0b110000111100,
	0b011000011100,
	0b101010100111,
	0b100110110110,
	0b010000100001,
	0b001010101100,
	0b001001100000,
	0b010110000101,
	0b100010000000,
	0b010110101010,
	0b101000110110,
	0b011000000011,
	0b111000101110,
	0b101110101100,
	0b000100111101,
	0b111100001000,
	0b011111011000,
	0b101101101010,
	0b111001011110,
	0b111100100100,
	0b000100010101,
	0b011000011010,
	0b010000111000,
	0b010000011110,
	0b101100111011,
	0b011001100100,
	0b000110001000,
	0b010010000111,
	0b001011101010,
	0b001110000001,
	0b010001100001,
	0b001111100010,
	0b000010111010,
	0b001000101111,
	0b100111110100,
	0b101010110111,
	0b010010111010,
	0b101100010011,
	0b011100000101,
	0b001101100110,
	0b011111000000,
	0b011000110010,
	0b001110110110,
	0b101110001001,
	0b000101101001,
	0b011111111111,
	0b100010100011,
	0b100111000001,
	0b111010001100,
	0b111101000101,
	0b000101100000,
	0b110001010110,
	0b111100111100,
	0b000100110000,
	0b101000101100,
	0b001100100101,
	0b001101011101,
	0b110011110101,
	0b011101000011,
	0b001000010001,
	0b110111101011,
	0b010101001110,
	0b100110110000,
	0b111000111011,
	0b011100001111,
	0b011101000101,
	0b011011110000,
	0b111101001110,
	0b000001111011,
	0b000110110101,
	0b110010001011,
	0b011011001001,
	0b011101011101,
	0b011000100000,
	0b110000110110,
	0b100010111111,
	0b010010110111,
	0b001011110110,
	0b011001110110,
	0b011100110110,
	0b110010110001,
	0b100011011001,
	0b000101101000,
	0b110000000010,
	0b010011101010,
	0b100100011000,
	0b000000001110,
	0b100011101111,
	0b100000111010,
	0b011010111010,
	0b100110010011,
	0b100001011001,
	0b110111100100,
	0b100110011011,
	0b101000000100,
	0b111110100001,
	0b100011000101,
	0b010010001111,
	0b010011111000,
	0b101000100001,
	0b000011011010,
	0b011100101010,
	0b101110000110,
	0b000011111110,
	0b010101011010,
	0b110101010100,
	0b101010010110,
	0b111101110100,
	0b101100011001,
	0b011101101111,
	0b001101011001,
	0b000010101010,
	0b001110101101,
	0b000011110010,
	0b101011000011,
	0b001011110011,
	0b101101001010,
	0b011101001100,
	0b111011001010,
	0b111010001000,
	0b010111101000,
	0b010100100101,
	0b000000011110,
	0b011000011110,
	0b011101011010,
	0b101000101010,
	0b111001011100,
	0b000110110100,
	0b010110100110,
	0b100011100110,
	0b100111010011,
	0b001010111000,
	0b101001110100,
	0b111011011111,
	0b001010000000,
	0b101001011111,
	0b010110110011,
	0b010100100010,
	0b011011001000,
	0b101111011001,
	0b000101010010,
	0b000000110110,
	0b011110101110,
	0b011010111011,
	0b110011100101,
	0b000111101000,
	0b110101100111,
	0b101100001100,
	0b110110110010,
	0b000000100011,
	0b010011011111,
	0b110000111110,
	0b111110101010,
	0b100001001011,
	0b001111101010,
	0b000100000001,
	0b001111110101,
	0b101010001011,
	0b111111001111,
	0b011101001011,
	0b101111001101,
	0b011111011010,
	0b011101101110,
	0b111111000001,
	0b110111110001,
	0b101110010110,
	0b101101000110,
	0b101101001100,
	0b001011110111,
	0b101000001000,
	0b010101111001,
	0b111011010111,
	0b010010010110,
	0b011010001000,
	0b011000101000,
	0b101101010101,
	0b110101000001,
	0b111111001000,
	0b111011001101,
	0b100100010111,
	0b111101010000,
	0b111001011111,
	0b011100110001,
	0b010101011110,
	0b101010111010,
	0b010110101111,
	0b100010011000,
	0b110110011001,
	0b010010000011,
	0b101011101110,
	0b011001111000,
	0b101110101011,
	0b111101001001,
	0b010110010001,
	0b011101011011,
	0b001001000100,
	0b111101011011,
	0b111111010110,
	0b010010000110,
	0b000111110001,
	0b011001101110,
	0b010100111100,
	0b100001101000,
	0b111010010000,
	0b110010110010,
	0b111001100011,
	0b011111100000,
	0b100100000011,
	0b111101101110,
	0b110000001101,
	0b010111110111,
	0b111111100001,
	0b001111100110,
	0b010001001100,
	0b001110001101,
	0b000110010101,
	0b101000101011,
	0b001001111100,
	0b101011011111,
	0b010100110010,
	0b100010011011,
	0b000111000101,
	0b111011011101,
	0b110100100000,
	0b110110011111,
	0b001111110011,
	0b100000000110,
	0b101110001011,
	0b000001110110,
	0b011100010000,
	0b110111100101,
	0b011101100100,
	0b000101000100,
	0b011010100100,
	0b101001101001,
	0b011101101100,
	0b110011111011,
	0b001010001011,
	0b011110110110,
	0b100000111011,
	0b010000100010,
	0b001100010101,
	0b010001110101,
	0b101100000010,
	0b101000101001,
	0b010010010101,
	0b101101001101,
	0b001101000111,
	0b111110001100,
	0b101010100100,
	0b011100111100,
	0b000011010110,
	0b011101100010,
	0b001000111010,
	0b001001000101,
	0b011110101011,
	0b100111110111,
	0b111001000011,
	0b101100100000,
	0b100110100010,
	0b101001011101,
	0b010011111111,
	0b100111001010,
	0b001100101110,
	0b110111100011,
	0b101100110100,
	0b010101010111,
	0b110110111110,
	0b010010101111,
	0b000000000001,
	0b000100001000,
	0b101011100011,
	0b101100001000,
	0b101011100111,
	0b110100111111,
	0b101011100100,
	0b000100000110,
	0b101011000010,
	0b011101010100,
	0b111110111101,
	0b110001100110,
	0b011110100011,
	0b110100110101,
	0b011000100010,
	0b000001100101,
	0b010111001001,
	0b001000011011,
	0b000100111011,
	0b100010100010,
	0b011011000000,
	0b111111010101,
	0b100011111011,
	0b011101110111,
	0b111000011011,
	0b111010000111,
	0b011010111001,
	0b110010101101,
	0b110111001100,
	0b111000001100,
	0b011101010110,
	0b110010001010,
	0b010100110110,
	0b111011011011,
	0b000010111100,
	0b010001001101,
	0b110010100010,
	0b011010001110,
	0b110100001100,
	0b100011100010,
	0b000101110011,
	0b110111110111,
	0b101110110001,
	0b111101111111,
	0b111100100101,
	0b011110011110,
	0b100000111001,
	0b100001010100,
	0b111001001110,
	0b111000000011,
	0b001010100111,
	0b011000101110,
	0b111011101100,
	0b100011100000,
	0b110010000010,
	0b001100110011,
	0b001100111001,
	0b101000011011,
	0b101100001101,
	0b000100001010,
	0b001110000000,
	0b101011011001,
	0b011000001110,
	0b111010001111,
	0b100001101111,
	0b010110100100,
	0b001111110010,
	0b000111100010,
	0b111011100111,
	0b110111101010,
	0b000101110110,
	0b010111101001,
	0b011000110001,
	0b100010110000,
	0b011000010111,
	0b100111111010,
	0b001100110010,
	0b000111010010,
	0b101010000111,
	0b100101100001,
	0b100000101010,
	0b101011000101,
	0b100110011010,
	0b100111010101,
	0b101001000100,
	0b100011010011,
	0b010111110110,
	0b011001101010,
	0b100111100011,
	0b000001010110,
	0b110001110011,
	0b010101010100,
	0b100000001000,
	0b000100100001,
	0b100011001110,
	0b001001000011,
	0b110110100101,
	0b110011111010,
	0b010110110001,
	0b000011000110,
	0b000101111000,
	0b111011001110,
	0b010010001100,
	0b111011000111,
	0b000101110001,
	0b011110011101,
	0b110101111100,
	0b000010101000,
	0b110110010111,
	0b001101100000,
	0b100110010010,
	0b001011100101,
	0b011001001110,
	0b110011111110,
	0b000000010011,
	0b011011100001,
	0b000010101111,
	0b110111110101,
	0b101001001000,
	0b110010011100,
	0b110000111111,
	0b110000000001,
	0b101010100010,
	0b100101010000,
	0b111110111001,
	0b010000010101,
	0b100100010000,
	0b000000011111,
	0b011011110011,
	0b010001110111,
	0b100100011111,
	0b011110101001,
	0b110001000111,
	0b010100010100,
	0b011111001111,
	0b110010010110,
	0b101110110111,
	0b110101001010,
	0b011100010101,
	0b000100000011,
	0b111001011001,
	0b001000111001,
	0b001001110111,
	0b111000100111,
	0b010011100001,
	0b010110001010,
	0b001000101110,
	0b011011000100,
	0b001011111111,
	0b000000110011,
	0b101101101001,
	0b001100111010,
	0b110010111111,
	0b010111011010,
	0b001001011100,
	0b001101101101,
	0b110110110101,
	0b011110101000,
	0b101001010110,
	0b111010101101,
	0b000101101111,
	0b100010111000,
	0b010101111110,
	0b111111001100,
	0b100101110100,
	0b001111111111,
	0b101101000001,
	0b100000101101,
	0b011010001010,
	0b110000100000,
	0b111100100011,
	0b101010010101,
	0b010100100111,
	0b010000010110,
	0b110001011100,
	0b010110001111,
	0b111101000001,
	0b110011010001,
	0b011011000110,
	0b011111001101,
	0b001100000011,
	0b010001011000,
	0b010110111100,
	0b010010101100,
	0b000101000010,
	0b011010100110,
	0b001111110110,
	0b011100101100,
	0b110011001001,
	0b110011000110,
	0b010011110011,
	0b001011100000,
	0b110100000010,
	0b110001100010,
	0b110101001110,
	0b001000111101,
	0b111110101111,
	0b100010111010,
	0b011101001001,
	0b000111111101,
	0b000101101011,
	0b100001110000,
	0b010111110101,
	0b110001101111,
	0b000100110011,
	0b111100111000,
	0b001000110000,
	0b100111110011,
	0b101000111011,
	0b101100101001,
	0b001011001001,
	0b010101001101,
	0b000011101110,
	0b011001111111,
	0b011011111100,
	0b010011100010,
	0b010001000100,
	0b111101000100,
	0b011111000010,
	0b001100110101,
	0b110011111100,
	0b000000000111,
	0b000010001111,
	0b101000111100,
	0b101110001111,
	0b011101000001,
	0b000101011111,
	0b000001001001,
	0b011111101010,
	0b100110111001,
	0b000111110010,
	0b011100111011,
	0b000111011000,
	0b001001000111,
	0b100001010001,
	0b000100011000,
	0b010011100011,
	0b011111101111,
	0b010101110101,
	0b101000110000,
	0b101011011000,
	0b001101100100,
	0b000111011100,
	0b101111001011,
	0b100011010110,
	0b010101100100,
	0b111001010111,
	0b000000100101,
	0b010001010111,
	0b111010100110,
	0b111110010010,
	0b011101011110,
	0b101100101010,
	0b100111111111,
	0b010010100001,
	0b010011100100,
	0b100101010011,
	0b000110001110,
	0b010010001110,
	0b010110010010,
	0b101001101000,
	0b010011110010,
	0b011111010111,
	0b111101101000,
	0b110100011101,
	0b000001001000,
	0b110010100101,
	0b111001001011,
	0b111001111001,
	0b110110011101,
	0b000110001001,
	0b101111000011,
	0b110101111010,
	0b001001101100,
	0b101110111101,
	0b100000011110,
	0b011001001011,
	0b110111101000,
	0b000010010010,
	0b011000111111,
	0b001100101100,
	0b111100000000,
	0b101100100101,
	0b010000111001,
	0b000001010001,
	0b101000111000,
	0b111001100000,
	0b000011011111,
	0b111100100010,
	0b000010010011,
	0b001000110111,
	0b011101110110,
	0b011010110101,
	0b011000011000,
	0b100101111010,
	0b001100111110,
	0b110110111101,
	0b111011001100,
	0b000000000110,
	0b110101000011,
	0b011010001001,
	0b011111001001,
	0b101101010000,
	0b101101111010,
	0b100101000111,
	0b011100011011,
	0b101110111111,
	0b101111111000,
	0b011101001101,
	0b000110100110,
	0b110000110000,
	0b110111011010,
	0b010011011001,
	0b000011111001,
	0b110110100001,
	0b110001010011,
	0b101010010010,
	0b111101110101,
	0b110100110001,
	0b001010110010,
	0b110111000000,
	0b001010100000,
	0b111110110111,
	0b111100101101,
	0b100111110000,
	0b111000001111,
	0b010100000010,
	0b000111001011,
	0b001110001100,
	0b100100110011,
	0b000010100010,
	0b011111001110,
	0b001111011100,
	0b111110011001,
	0b010010110011,
	0b110011011001,
	0b100011110010}
